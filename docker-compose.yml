services:
  # Database service (SQLite with persistent storage)
  database:
    image: alpine:latest
    volumes:
      - ./data:/app/data
    command: >
      sh -c "
        apk add --no-cache sqlite &&
        mkdir -p /app/data &&
        touch /app/data/zazzle_pipeline.db &&
        chmod 777 /app/data/zazzle_pipeline.db &&
        chown 1000:1000 /app/data/zazzle_pipeline.db &&
        tail -f /dev/null
      "
    healthcheck:
      test: ["CMD", "sqlite3", "/app/data/zazzle_pipeline.db", "SELECT 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
    environment:
      - DATABASE_URL=sqlite:////app/data/zazzle_pipeline.db
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - REDDIT_USER_AGENT=${REDDIT_USER_AGENT}
      - ZAZZLE_AFFILIATE_ID=${ZAZZLE_AFFILIATE_ID}
      - IMGUR_CLIENT_ID=${IMGUR_CLIENT_ID}
      - IMGUR_CLIENT_SECRET=${IMGUR_CLIENT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_CLI_MODE=${STRIPE_CLI_MODE:-false}
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Task Runner (processes task queue)
  task-runner:
    build:
      context: .
      dockerfile: Dockerfile.pipeline
    volumes:
      - ./data:/app/data
    environment:
      - DATABASE_URL=sqlite:////app/data/zazzle_pipeline.db
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - REDDIT_USER_AGENT=${REDDIT_USER_AGENT}
      - ZAZZLE_AFFILIATE_ID=${ZAZZLE_AFFILIATE_ID}
      - IMGUR_CLIENT_ID=${IMGUR_CLIENT_ID}
      - IMGUR_CLIENT_SECRET=${IMGUR_CLIENT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_CLI_MODE=${STRIPE_CLI_MODE:-false}
      - TASK_PROCESSING_INTERVAL=300  # 5 minutes
    depends_on:
      database:
        condition: service_healthy
      api:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: python -m app.task_runner

  # Stripe CLI for local webhook testing
  stripe-cli:
    image: stripe/stripe-cli:latest
    environment:
      - STRIPE_API_KEY=${STRIPE_SECRET_KEY}
    command: >
      listen
      --forward-to api:8000/api/donations/webhook
      --events checkout.session.completed,payment_intent.succeeded,payment_intent.payment_failed
      --print-json
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  data: 